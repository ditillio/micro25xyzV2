params:

- {name: w, value: 30, min: 0, max: 50, round: 1}
- {name: b, value: 60, min: 0, max: 60, round: 1}
- {name: d, value: 20, min: 0, max: 4}
- {name: ubar, value: 36}

- {name: p2H, value: 0.75}
- {name: p2L, value: 0.25}

- {name: x1, value: 40} # revenue in case of failure
- {name: x2, value: 120} # revenue in case of success



calcs:

  p2H: params.p2H
  p2L: params.p2L

  p1H: (1)-(calcs.p2H)
  p1L: (1)-(calcs.p2L)

  w1: params.w
  u1L: calcs.w1
  u1H: (calcs.w1)-(params.d)

  w2: (params.w)+(params.b)
  u2L: calcs.w2
  u2H: (calcs.w2)-(params.d)

  ewH: (calcs.p1H)*(calcs.w1)+(calcs.p2H)*(calcs.w2)
  ewL: (calcs.p1L)*(calcs.w1)+(calcs.p2L)*(calcs.w2)

  euH: (calcs.p1H)*(calcs.u1H)+(calcs.p2H)*(calcs.u2H)
  euL: (calcs.p1L)*(calcs.u1L)+(calcs.p2L)*(calcs.u2L)
  eu: max(calcs.euH,calcs.euL)

  profitH: (calcs.p1H)*((params.x1)-(calcs.w1))+(calcs.p2H)*((params.x2)-(calcs.w2))
  profitL: (calcs.p1L)*((params.x1)-(calcs.w1))+(calcs.p2L)*((params.x2)-(calcs.w2))

aspectRatio: 1

layout:
  OneGraphPlusSidebar:

    graph: 
      xAxis:
        max: 100
        ticks: 0
      yAxis:
        max: 100
        min: -(1.1)*(params.d)
        ticks: 0

      objects:

        - Label:
                coordinates: [100, 0]
                text: "` \\\\text{Payoff} `"
        - Label:
                coordinates: [0, 100]
                text: "` \\\\text{Utilit√†}  `"

# bernoulli utility function with high effort
        - Line:
            yIntercept: -(params.d)
            slope: 1
            color: Blue
            label:
              text: "` U_H=W-D `"
              x: 100
              position: c
            strokeWidth: 1.5
        - Point:
            coordinates: [0, -(params.d)]
            droplines: {vertical: , horizontal: -(params.d)}
            strokeWidth: 0.5
            color: Blue
            r: 0

# bernoulli utility function with low effort
        - Line:
            yIntercept: 0
            slope: 1
            color: Blue
            label:
              text: "` U_L=W `"
              x: 100
              position: c
            strokeWidth: 1.5
        - Point:
            coordinates: [0, 0]
            droplines: {vertical: , horizontal: 0}
            strokeWidth: 0.5
            color: Blue
            r: 0

# points
        - Point:
            coordinates: [calcs.w1, calcs.u1H]
            droplines: {vertical: calcs.w1.toFixed(0), horizontal: calcs.u1H.toFixed(2)}
            strokeWidth: 0.5
            color: Blue
            r: 3
        - Point:
            coordinates: [calcs.w2, calcs.u2H]
            droplines: {vertical: calcs.w2.toFixed(0), horizontal: calcs.u2H.toFixed(2)}
            strokeWidth: 0.5
            color: Blue
            r: 3
        - Segment:
            a: [calcs.w1, calcs.u1H]
            b: [calcs.w2, calcs.u2H]
            color: Red
            strokeWidth: 1.5
            lineStyle: dashed
        - Point:
            coordinates: [calcs.ewH, calcs.euH]
            droplines: {vertical: calcs.ewH.toFixed(0), horizontal: calcs.euH.toFixed(2)}
            strokeWidth: 0.5
            color: Red
            r: 3
            label:
              text: H
              position: tl

        - Point:
            coordinates: [calcs.w1, calcs.u1L]
            droplines: {vertical: calcs.w1.toFixed(0), horizontal: calcs.u1L.toFixed(2)}
            strokeWidth: 0.5
            color: Blue
            r: 3
        - Point:
            coordinates: [calcs.w2, calcs.u2L]
            droplines: {vertical: calcs.w2.toFixed(0), horizontal: calcs.u2L.toFixed(2)}
            strokeWidth: 0.5
            color: Blue
            r: 3
        - Segment:
            a: [calcs.w1, calcs.u1L]
            b: [calcs.w2, calcs.u2L]
            color: Red
            strokeWidth: 1.5
            lineStyle: dashed
        - Point:
            coordinates: [calcs.ewL, calcs.euL]
            droplines: {vertical: calcs.ewL.toFixed(0), horizontal: calcs.euL.toFixed(2)}
            strokeWidth: 0.5
            color: Red
            r: 3
            label:
              text: L
              position: tl

# reservation utility
        - Line:
            point: [0,params.ubar]
            slope: 0
            color: Green
            strokeWidth: 1
            label:
              text: "` \\\\underline{U} = ${params.ubar} `"
              x: 100




    sidebar:

      controls:

      - title: Bla bla bla
        description: bla bla

        # radioGroup:
        #   param: which
        #   options:
        #     - Mantieni ùê∏ùëÉ = 50 costante
        #     - Mantieni ùê∏ùëà = 5 costante

        sliders:
        - param: w
          label: W_0
        - param: b
          label: B

        divs:
        - html: <br>
        - html: "`  Salario atteso $ ${calcs.ewH} $
                      `"
        - html: "`  EUH $ ${calcs.euH} $
                      `"
        - html: "`  EUL $ ${calcs.euL} $
                      `"






    explanation:

      divs:

        - html: "` Il contratto selezionato non √® accettabile per il lavoratore: i punti $L$ e $H$
                    si trovano entrambi sotto la retta verde.
                      `"
          show: calcs.eu < params.ubar

        - html: "` Il contratto selezionato √® accettabile per il lavoratore: i punti $L$ e $H$
                    non si trovano entrambi sotto la retta verde.
                      `"
          show: calcs.eu >= params.ubar

        - html: "` Il contratto inoltre induce il lavoratore a impegnarsi:
                    il punto $H$ non si trova sotto il punto $L$.
                      `"
          show: calcs.eu >= params.ubar && calcs.euH >= calcs.euL

        - html: "` Il contratto per√≤ non induce il lavoratore a impegnarsi
                    (il punto $H$ si trova sotto il punto $L$).
                      `"
          show: calcs.eu >= params.ubar && calcs.euH < calcs.euL

        - html: "` Il profitto atteso dell'impresa √® quindi
                  $$
                  ${calcs.p1H} \\\\times ( ${params.x1} - ${calcs.w1} ) +
                  ${calcs.p2H} \\\\times ( ${params.x2} - ${calcs.w2} ) =
                  ${calcs.profitH}
                  $$
                      `"
          show: calcs.eu >= params.ubar && calcs.euH >= calcs.euL

        - html: "` Il profitto atteso dell'impresa √® quindi
                  $$
                  ${calcs.p1L} \\\\times ( ${params.x1} - ${calcs.w1} ) +
                  ${calcs.p2L} \\\\times ( ${params.x2} - ${calcs.w2} ) =
                  ${calcs.profitL}
                  $$
                      `"
          show: calcs.eu >= params.ubar && calcs.euH < calcs.euL













