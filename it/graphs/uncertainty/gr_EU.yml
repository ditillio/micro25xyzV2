params:

- {name: w1, value: 0, min: 0, max: 100}
- {name: w2, value: 100, min: 0, max: 100}

- {name: p1, value: 0.5, min: 0, max: 1, round: 0.1}

- {name: p1slider, value: 60, min: 50, max: 70, round: 1}



calcs:
  p1: ((params.p1slider)-(50))/(20)
  p2: (1)-(calcs.p1)
  u1: sqrt(params.w1)
  u2: sqrt(params.w2)
  EP: (calcs.p1)*(params.w1)+(calcs.p2)*(params.w2)
  EU: (calcs.p1)*(calcs.u1)+(calcs.p2)*(calcs.u2)
  CE: (calcs.EU)^(2)
  RP: (calcs.EP)-(calcs.CE)

aspectRatio: 1.3

layout:
  OneGraph:

    graph: 
      xAxis:
        max: 115
        ticks: 0
      yAxis:
        max: 11.5
        ticks: 0

      objects:

        - Label:
                coordinates: [115, 0]
                text: "` \\\\text{Payoff} `"
        - Label:
                coordinates: [0, 11.5]
                text: "` \\\\text{Utilità}  `"

# slider
        - Label:
                coordinates: [40, 11]
                text: "` \\\\Pr(W_L) = ${calcs.p1.toFixed(2)} `"
                color: Black
        - Rectangle: {a: [50, 10.95], b: [70, 11.05], fill: Lightgray, opacity: 1, strokeWidth: 0}
        - Ellipse: {c: [50,11], rx: 0.5, ry: 0.05, fill: Lightgray, opacity: 1, strokeWidth: 0}
        - Ellipse: {c: [70,11], rx: 0.5, ry: 0.05, fill: Lightgray, opacity: 1, strokeWidth: 0}
        - Point:
            coordinates: [params.p1slider, 11]
            r: 8
            color: Blue
            drag:
              - horizontal: p1slider

# bernoulli utility function

        - Curve:
            fn: (x)^(1/2)
            color: Blue
            label:
              text: "` u(W)=\\\\sqrt{W} `"
              x: 115
              position: c
            strokeWidth: 1.5

# points
        - Point:
            coordinates: [params.w1, calcs.u1]
            droplines: {vertical: params.w1, horizontal: calcs.u1.toFixed(2)}
            strokeWidth: 0.5
            color: Blue
            r: 5
            draggable: true
            show: params.p1slider < 70
        - Point:
            coordinates: [params.w2, calcs.u2]
            droplines: {vertical: params.w2, horizontal: calcs.u2.toFixed(2)}
            strokeWidth: 0.5
            color: Blue
            r: 5
            draggable: true
            show: params.p1slider > 50
        - Point:
            coordinates: [calcs.EP, calcs.EU]
            droplines: {vertical: calcs.EP.toFixed(2)}
            strokeWidth: 0.5
            color: Darkgreen
            r: 0
        - Point:
            coordinates: [calcs.EP, calcs.EU]
            droplines: {horizontal: calcs.EU.toFixed(2)}
            strokeWidth: 0.5
            color: Red
            r: 2
        - Point:
            coordinates: [calcs.CE, calcs.EU]
            droplines: {vertical: calcs.CE.toFixed(2)}
            strokeWidth: 0.5
            color: Blue
            r: 2

# risk premium
        - Label:
            coordinates: [((calcs.EP)+(calcs.CE))/2, 0.48]
            text: "` RP `"
        - Arrow:
            begin: [calcs.CE, 0.3]
            end: [calcs.EP, 0.3]
            double: true
            color: black
            strokeWidth: 1



# calculations
        - Label:
                coordinates: [65, 4.5]
                text: "` EP = ${calcs.p1.toFixed(2)} \\\\times ${params.w1} +
                  ${calcs.p2.toFixed(2)} \\\\times ${params.w2} = ${calcs.EP.toFixed(2)} `"
                color: Darkgreen
                position: l
        - Label:
                coordinates: [65, 4]
                text: "` EU = ${calcs.p1.toFixed(2)} \\\\times\\\\sqrt{${params.w1}} +
                  ${calcs.p2.toFixed(2)} \\\\times\\\\sqrt{${params.w2}} = ${calcs.EU.toFixed(2)} `"
                color: Red
                position: l
        - Label:
                coordinates: [65, 3.5]
                text: "` CE = EU^2 = ${calcs.CE.toFixed(2)} `"
                color: Blue
                position: l
        - Label:
                coordinates: [65, 3]
                text: "` RP = EP-CE = ${calcs.RP.toFixed(2)} `"
                color: Black
                position: l



# segment
        - Segment:
            a: [params.w1, calcs.u1]
            b: [params.w2, calcs.u2]
            color: Red
            strokeWidth: 1



    explanation:
      divs:
        - html: "` ... trascinare i punti blu nel grafico  `"



    # sidebar:
    #   controls:
    #   - title: Funzione di produzione
    #     description: Muovere i primi due cursori per modificare i parametri della funzione di 
    #                 produzione. Muovere il terzo cursore o trascinare il punto blu nel grafico
    #                 per vedere come,
    #                 dati i parametri scelti, la quantità di output varia al variare
    #                  della quantità di input.
    #     sliders:
    #     - param: w1
    #       label: W_1
    #     - param: w2
    #       label: W_2
    #     divs:
    #     - html: "` $EP=${calcs.EP.toFixed(2)}$ e $EU=${calcs.EU.toFixed(2)}$ `"
    #       show: params.p1 !== 3
